diff --git a/.gitignore b/.gitignore
index cbeb491..4647cf5 100644
--- a/.gitignore
+++ b/.gitignore
@@ -124,4 +124,6 @@ launcher_accounts.json
 
 # For standard to work:
 client/node_modules/
-client/public/build/
\ No newline at end of file
+client/public/build/
+
+minecraft-server/
\ No newline at end of file
diff --git a/client/package.json b/client/package.json
index ceeca37..aacf74c 100644
--- a/client/package.json
+++ b/client/package.json
@@ -4,7 +4,7 @@
   "private": true,
   "scripts": {
     "generateWindowsCoordinates": "node scripts/generateWindowsCoordinates.js",
-    "build": "rollup -c && npm run generateWindowsCoordinates",
+    "build": "rollup -c",
     "dev": "rollup -c -w",
     "start": "sirv public --no-clear"
   },
diff --git a/client/public/windows/inventory.png b/client/public/windows/inventory.png
index 493442e..700e5f8 100644
Binary files a/client/public/windows/inventory.png and b/client/public/windows/inventory.png differ
diff --git a/client/rollup.config.js b/client/rollup.config.js
index 4a38da5..c1ef108 100644
--- a/client/rollup.config.js
+++ b/client/rollup.config.js
@@ -31,7 +31,7 @@ function serve () {
 export default {
   input: 'src/main.js',
   output: {
-    sourcemap: !production,
+    sourcemap: true,
     format: 'iife',
     name: 'app',
     file: 'public/build/bundle.js'
diff --git a/client/src/App.svelte b/client/src/App.svelte
index c6f65f2..9317192 100644
--- a/client/src/App.svelte
+++ b/client/src/App.svelte
@@ -3,6 +3,8 @@
   import { onMount } from "svelte";
 
   import { receiveWindow, updateWindow } from "./updateWindow";
+  import * as canvasUtils from "./canvasUtils";
+  import windowsCoordinatesGenerator from "./windowsCoordinatesGenerator";
 
   import SlotList from "./SlotList.svelte";
 
@@ -13,72 +15,68 @@
   let showJson = false;
   let showItemList = true;
 
-  let windowsCoordinates;
+  let windowsCoordinates = windowsCoordinatesGenerator();
+
+  $: ctx = canvas?.getContext("2d");
 
   // Draw window reactively when `window` changes
-  $: drawWindow(window);
+  $: {
+    window;
+
+    drawWindow();
+  }
+
+  // Re-draw the hovered slot and its antecessor
+  $: {
+    currentSlot;
+    if (currentSlot !== oldSlot) {
+      canvasUtils.drawSlot(canvas, window.slots[oldSlot], initialSlot, currentSlot);
+      canvasUtils.drawSlot(canvas, window.slots[currentSlot], initialSlot, currentSlot);
+      oldSlot = currentSlot;
+    }
+  }
 
-  const drawWindow = throttle(async (window) => {
-    if (!window) return;
+  const _drawWindow = async () => {
+    if (!window || !canvas) return;
 
-    const ctx = canvas.getContext("2d");
+    console.log("Drawing window");
 
     // Draw background
-    await new Promise((resolve) => {
-      const windowImage = new Image();
-      windowImage.addEventListener("load", function () {
-        canvas.width = windowImage.width;
-        canvas.height = windowImage.height;
-        ctx.drawImage(windowImage, 0, 0);
-
-        resolve();
-      });
-      windowImage.src = `windows/${window?.type ?? "inventory"}.png`;
-    });
+    await canvasUtils.drawImage(
+      canvas,
+      `windows/${window?.type ?? "inventory"}.png`,
+      [0, 0],
+      null,
+      null,
+      true // Resize canvas to the image's size
+    );
+
+    // Draw hovered slot
+    if (currentSlot)
+      canvasUtils.fillSlotBackground(canvas, currentSlot, "#c5c5c5");
 
     // Draw slots
     for (const slot in window.slots) {
-      if (!window.slots[slot]) continue;
-
-      const slotCoordinates =
-        windowsCoordinates[window.type][window.slots[slot].slot];
-
-      if (window.slots[slot].texture && slotCoordinates) {
-        const slotImage = new Image();
-        slotImage.src = window.slots[slot].texture;
-
-        slotImage.onload = function () {
-          // Draw slot image
-          ctx.imageSmoothingEnabled = false;
-          ctx.drawImage(
-            slotImage,
-            slotCoordinates[0],
-            slotCoordinates[1],
-            32,
-            32
-          );
-
-          // Draw slot count
-          if (window.slots[slot].count > 1) {
-            ctx.font = "20px monospace";
-            ctx.fillStyle = "black";
-            ctx.textAlign = "end";
-            ctx.fillText(
-              window.slots[slot].count,
-              slotCoordinates[0] + 33,
-              slotCoordinates[1] + 31
-            );
-            ctx.fillStyle = "white";
-            ctx.fillText(
-              window.slots[slot].count,
-              slotCoordinates[0] + 32,
-              slotCoordinates[1] + 30
-            );
-          }
-        };
-      }
+      if (window.slots[slot])
+        await canvasUtils.drawSlotItem(canvas, window.slots[slot], initialSlot);
     }
-  }, drawWindowThrottleTime);
+
+    // Draw hovered slot number
+    if (currentSlot) canvasUtils.drawSlotNumber(canvas, currentSlot);
+  };
+  const drawWindow = throttle(_drawWindow, drawWindowThrottleTime);
+
+  // Hovering functionality
+  let cursorCoordinates;
+  let currentSlot;
+  let oldSlot;
+
+  // Drag and drop functionality
+  let initialSlot;
+
+  const dragAndDrop = (fromSlotNumber, toSlotNumber) => {
+    console.log(`Drag and drop from ${fromSlotNumber} to ${toSlotNumber}`);
+  };
 
   onMount(async () => {
     // Fetch Windows Coordinates
@@ -96,6 +94,37 @@
       window = updateWindow(window, _windowUpdate);
     });
 
+    canvas.addEventListener("pointerdown", (event) => {
+      initialSlot = canvasUtils.getCursorSlot(canvas, event);
+      if (initialSlot) drawWindow();
+    });
+
+    canvas.addEventListener("pointerup", (event) => {
+      const finalSlot = canvasUtils.getCursorSlot(canvas, event);
+      if (initialSlot && finalSlot) dragAndDrop(initialSlot, finalSlot);
+      if (initialSlot) drawWindow();
+      initialSlot = null;
+    });
+
+    canvas.addEventListener("pointerleave", () => {
+      initialSlot = null;
+      currentSlot = null;
+
+      drawWindow();
+    });
+
+    canvas.addEventListener("pointermove", (event) => {
+      cursorCoordinates = canvasUtils.getCursorCoordinates(canvas, event);
+
+      const _currentSlot = canvasUtils.getCursorSlot(canvas, event);
+      if (_currentSlot !== currentSlot) {
+        currentSlot = _currentSlot;
+
+        // If a drag and drop is happening, re-draw the window
+        if (initialSlot) drawWindow();
+      }
+    });
+
     // onDestroy
     return () => {
       socket.disconnect();
@@ -135,7 +164,10 @@
 
   {#if window}
     {#if window.unsupported}
-      <p style="color: red;">The current window is not supported but mineflayer-web-inventory will still try to show you inventory updates</p>
+      <p style="color: red;">
+        The current window is not supported but mineflayer-web-inventory will
+        still try to show you inventory updates
+      </p>
     {/if}
     <p>Current Window Id: {window.realId ?? window.id}</p>
     <p>Current Window Type: {window.realType ?? window.type}</p>
diff --git a/client/src/canvasUtils.js b/client/src/canvasUtils.js
new file mode 100644
index 0000000..333ae0b
--- /dev/null
+++ b/client/src/canvasUtils.js
@@ -0,0 +1,152 @@
+/* global Image */
+
+import windowsCoordinatesGenerator from './windowsCoordinatesGenerator'
+
+const windowsCoordinates = windowsCoordinatesGenerator()
+
+export const drawImage = (
+  canvas,
+  imageSrc,
+  coordinates,
+  resizeX,
+  resizeY,
+  resizeCanvas = false
+) => {
+  return new Promise((resolve) => {
+    const ctx = canvas?.getContext('2d')
+
+    const image = new Image()
+    image.addEventListener('load', function () {
+      if (resizeCanvas) {
+        canvas.width = image.width
+        canvas.height = image.height
+      }
+      if (resizeX && resizeY) {
+        ctx.drawImage(
+          image,
+          coordinates[0],
+          coordinates[1],
+          resizeX,
+          resizeY
+        )
+      } else {
+        ctx.drawImage(image, coordinates[0], coordinates[1])
+      }
+      resolve(image)
+    })
+    image.src = imageSrc
+  })
+}
+
+export const fillSlotBackground = (canvas, slotNumber, color) => {
+  const ctx = canvas?.getContext('2d')
+
+  const slotCoordinates = windowsCoordinates[window.type][slotNumber]
+  if (!slotCoordinates) return
+
+  ctx.fillStyle = color
+  ctx.fillRect(
+    slotCoordinates[0],
+    slotCoordinates[1],
+    windowsCoordinates.slotSize,
+    windowsCoordinates.slotSize
+  )
+}
+
+export const drawSlotNumber = (canvas, slotNumber) => {
+  const ctx = canvas?.getContext('2d')
+
+  const slotCoordinates = windowsCoordinates[window.type][slotNumber]
+
+  ctx.font = '10px monospace'
+  ctx.fillStyle = 'white'
+  ctx.textAlign = 'start'
+  ctx.fillText(slotNumber, slotCoordinates[0] + 1, slotCoordinates[1] + 10)
+  ctx.fillStyle = 'black'
+  ctx.fillText(slotNumber, slotCoordinates[0] + 1, slotCoordinates[1] + 10)
+}
+
+export const drawSlotItem = async (canvas, slot, initialSlot) => {
+  const ctx = canvas?.getContext('2d')
+
+  if (!slot) return
+
+  const _globalAlpha = ctx.globalAlpha
+  if (initialSlot === slot.slot) {
+    ctx.globalAlpha = 0.3
+  }
+
+  const slotCoordinates = windowsCoordinates[window.type][slot.slot]
+  if (!slotCoordinates || !slot.texture) return
+
+  ctx.imageSmoothingEnabled = false
+  await drawImage(
+    canvas,
+    slot.texture,
+    slotCoordinates,
+    windowsCoordinates.slotSize,
+    windowsCoordinates.slotSize,
+    false
+  )
+
+  // Draw slot count
+  if (slot.count > 1) {
+    ctx.font = '20px monospace'
+    ctx.fillStyle = 'black'
+    ctx.textAlign = 'end'
+    ctx.fillText(
+      slot.count,
+      slotCoordinates[0] + 33,
+      slotCoordinates[1] + 31
+    )
+    ctx.fillStyle = 'white'
+    ctx.fillText(
+      slot.count,
+      slotCoordinates[0] + 32,
+      slotCoordinates[1] + 30
+    )
+  }
+
+  ctx.globalAlpha = _globalAlpha
+}
+
+export const drawSlot = async (canvas, slot, initialSlot, currentSlot) => {
+  if (slot.slot === currentSlot) {
+    fillSlotBackground(canvas, slot.slot, '#c5c5c5')
+  } else {
+    fillSlotBackground(canvas, slot.slot, '#8b8b8b')
+  }
+
+  await drawSlotItem(canvas, slot, initialSlot)
+
+  if (slot.slot === currentSlot) {
+    drawSlotNumber(canvas, currentSlot)
+  }
+}
+
+export const drawCursorSlot = (canvas, slot, cursorCoordinates) => {
+
+}
+
+export const getCursorCoordinates = (canvas, event) => {
+  const rect = canvas.getBoundingClientRect()
+  const x = event.clientX - rect.left
+  const y = event.clientY - rect.top
+  return [x, y]
+}
+
+export const getCursorSlot = (canvas, event) => {
+  const cursorCoordinates = getCursorCoordinates(canvas, event)
+
+  const slotIndex = Object.values(windowsCoordinates[window.type]).findIndex(
+    (slotCoordinates) =>
+      cursorCoordinates[0] > slotCoordinates[0] &&
+      cursorCoordinates[0] <=
+        slotCoordinates[0] + windowsCoordinates.slotSize &&
+      cursorCoordinates[1] > slotCoordinates[1] &&
+      cursorCoordinates[1] <= slotCoordinates[1] + windowsCoordinates.slotSize
+  )
+
+  if (slotIndex === -1) return null
+  return Number(Object.keys(windowsCoordinates[window.type])[slotIndex])
+}
diff --git a/client/scripts/generateWindowsCoordinates.js b/client/src/windowsCoordinatesGenerator.js
similarity index 69%
rename from client/scripts/generateWindowsCoordinates.js
rename to client/src/windowsCoordinatesGenerator.js
index bf15582..c99fd61 100644
--- a/client/scripts/generateWindowsCoordinates.js
+++ b/client/src/windowsCoordinatesGenerator.js
@@ -1,10 +1,7 @@
-const path = require('path')
-const fsPromises = require('fs/promises')
-
-const main = async () => {
-  const outputFilePath = path.join(__dirname, '..', 'public', 'windows', 'coordinates.json')
-
+export default async () => {
   const windowSlotsCoords = {
+    slotSize: 32,
+    slotSeparation: 36,
     inventory: {},
     chest: {},
     'large-chest': {},
@@ -14,27 +11,27 @@ const main = async () => {
 
   windowSlotsCoords.inventory = {
     // Crafting slots
-    0: [307, 55],
-    1: [195, 35],
-    2: [231, 35],
-    3: [195, 71],
-    4: [231, 71],
+    0: [308, 56],
+    1: [196, 36],
+    2: [232, 36],
+    3: [196, 72],
+    4: [232, 72],
 
-    5: [15, 15], // Helmet
-    9: [15, 167], // Inventory
-    18: [15, 203], // Inventory
-    27: [15, 239], // Inventory
-    36: [15, 283], // Tool bar
-    45: [153, 123] // Left hand
+    5: [16, 16], // Helmet
+    9: [16, 168], // Inventory
+    18: [16, 204], // Inventory
+    27: [16, 240], // Inventory
+    36: [16, 284], // Tool bar
+    45: [154, 124] // Left hand
   }
   // Add armor slots (5 - 8)
   for (let i = 5 + 1; i <= 8; i++) {
-    windowSlotsCoords.inventory[i] = [windowSlotsCoords.inventory[i - 1][0], windowSlotsCoords.inventory[i - 1][1] + 36]
+    windowSlotsCoords.inventory[i] = [windowSlotsCoords.inventory[i - 1][0], windowSlotsCoords.inventory[i - 1][1] + windowSlotsCoords.slotSeparation]
   }
   // Add inventory and tool bar slots
   for (let i = 9; i < 5 * 9; i += 9) {
     for (let j = 1; j <= 8; j++) {
-      windowSlotsCoords.inventory[i + j] = [windowSlotsCoords.inventory[i][0] + 36 * j, windowSlotsCoords.inventory[i][1]]
+      windowSlotsCoords.inventory[i + j] = [windowSlotsCoords.inventory[i][0] + windowSlotsCoords.slotSeparation * j, windowSlotsCoords.inventory[i][1]]
     }
   }
 
@@ -52,7 +49,7 @@ const main = async () => {
   }
   for (let i = 0; i < 7 * 9; i += 9) {
     for (let j = 1; j <= 8; j++) {
-      windowSlotsCoords.chest[i + j] = [windowSlotsCoords.chest[i][0] + 36 * j, windowSlotsCoords.chest[i][1]]
+      windowSlotsCoords.chest[i + j] = [windowSlotsCoords.chest[i][0] + windowSlotsCoords.slotSeparation * j, windowSlotsCoords.chest[i][1]]
     }
   }
 
@@ -73,7 +70,7 @@ const main = async () => {
   }
   for (let i = 0; i < 10 * 9; i += 9) {
     for (let j = 1; j <= 8; j++) {
-      windowSlotsCoords['large-chest'][i + j] = [windowSlotsCoords['large-chest'][i][0] + 36 * j, windowSlotsCoords['large-chest'][i][1]]
+      windowSlotsCoords['large-chest'][i + j] = [windowSlotsCoords['large-chest'][i][0] + windowSlotsCoords.slotSeparation * j, windowSlotsCoords['large-chest'][i][1]]
     }
   }
 
@@ -92,13 +89,13 @@ const main = async () => {
   // Add input slots (1-9)
   for (let i = 1; i < 3 * 3; i += 3) {
     for (let j = 1; j <= 2; j++) {
-      windowSlotsCoords['crafting-table'][i + j] = [windowSlotsCoords['crafting-table'][i][0] + 36 * j, windowSlotsCoords['crafting-table'][i][1]]
+      windowSlotsCoords['crafting-table'][i + j] = [windowSlotsCoords['crafting-table'][i][0] + windowSlotsCoords.slotSeparation * j, windowSlotsCoords['crafting-table'][i][1]]
     }
   }
   // Add inventory slots (10-45)
   for (let i = 10; i < 5 * 9; i += 9) {
     for (let j = 1; j <= 8; j++) {
-      windowSlotsCoords['crafting-table'][i + j] = [windowSlotsCoords['crafting-table'][i][0] + 36 * j, windowSlotsCoords['crafting-table'][i][1]]
+      windowSlotsCoords['crafting-table'][i + j] = [windowSlotsCoords['crafting-table'][i][0] + windowSlotsCoords.slotSeparation * j, windowSlotsCoords['crafting-table'][i][1]]
     }
   }
 
@@ -116,10 +113,9 @@ const main = async () => {
   // Add inventory slots (3-38)
   for (let i = 3; i < 4 * 9; i += 9) {
     for (let j = 1; j <= 8; j++) {
-      windowSlotsCoords.furnace[i + j] = [windowSlotsCoords.furnace[i][0] + 36 * j, windowSlotsCoords.furnace[i][1]]
+      windowSlotsCoords.furnace[i + j] = [windowSlotsCoords.furnace[i][0] + windowSlotsCoords.slotSeparation * j, windowSlotsCoords.furnace[i][1]]
     }
   }
 
-  await fsPromises.writeFile(outputFilePath, JSON.stringify(windowSlotsCoords, null, 2))
+  return windowSlotsCoords
 }
-main()
diff --git a/example.js b/example.js
index da355cc..a3088ed 100644
--- a/example.js
+++ b/example.js
@@ -9,8 +9,8 @@
  */
 
 const mineflayer = require('mineflayer')
-const inventoryViewer = require('mineflayer-web-inventory')
-// const inventoryViewer = require('./index')
+// const inventoryViewer = require('mineflayer-web-inventory')
+const inventoryViewer = require('./index')
 
 if (process.argv.length > 6) {
   console.log('Usage : node example.js [<host>] [<port>] [<name>] [<password>]')
